{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Kreas API","text":"<p>100% Vanilla PHP 100% Vanilla MySQL Extra chocolate with docker!</p> <p>A simple API that implements the REST methodology for request and responses.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>There are 2 ways to make this work:</p> <ul> <li>Install docker and run docker compose command (tested, see more below)</li> <li>PHP 8.2 (NOT TESTED)</li> </ul>"},{"location":"#installation","title":"Installation","text":"<ol> <li>With docker</li> </ol> <p><code>git clone https://github.com/edoardovicenzi/s2i-kreas.git</code></p> <p><code>cd s2i-kreas</code></p> <p><code>docker compose up -d</code></p> <ol> <li>Without docker<ul> <li>You will need to change the information for the databse connection in /app/database/MySQLDatabase.php</li> </ul> </li> </ol>"},{"location":"#api-documentation","title":"API Documentation","text":"<p>You can also view the documentation on the wiki page or the hosted version on this github link. After the service is running you can start using the API. Here is a reference for each and every supported endpoint.</p> <p>Accessing not existing endpoints or not existing resources will yield a status code 404. A <code>message</code> property will be return for additional human-readable context on the error.</p> <p>Each request and each response body MUST have a \"data\" property in which the data is to be put. For reference:</p> <pre><code>{\n  \"data\": ...\n}\n</code></pre>"},{"location":"#products","title":"/products","text":"<p>This endpoint is responsible for CRUD operations on the products. It will always return a Product object with the following structure:</p> <pre><code>{\n  \"product_id\": Integer,\n  \"product_name\": String,\n  \"saved_co2\": Integer\n}\n</code></pre>"},{"location":"#get","title":"GET","text":"<p>This method always returns an array of Product objects. If no elements are found a 404 error is thrown.</p> <p>For example:</p> <p><code>GET /products</code></p> <p>Will result in:</p> <p><code>Status 202</code></p> <pre><code>{\n  \"data\": [\n    {\n      \"product_id\": 1,\n      \"product_name\": \"steak\",\n      \"saved_co2\": 20000\n    },\n    {\n      \"product_id\": 2,\n      \"product_name\": \"venison\",\n      \"saved_co2\": 13456\n    },\n    {\n      \"product_id\": 3,\n      \"product_name\": \"porkchop\",\n      \"saved_co2\": 19427\n    }\n  ]\n}\n</code></pre> <p>If no products are found:</p> <p><code>Status 404</code></p> <pre><code>{\n  \"message\": \"Products not found\"\n}\n</code></pre>"},{"location":"#post","title":"POST","text":"<p>This method allows to add a product to the available list. You will need to pass the following properties with the appropriate values.</p> Property Name Value Type Notes product_name String saved_co2 Integer Must be greater than 0 <p>WARNING two prodcuts can have the same name and they will always refer to different products. This behavior is intended. Might change in the future. Because of this the method will always return a status code 202.</p> <p>For example:</p> <p><code>POST /products</code></p> <p>With json body:</p> <pre><code>{\n  \"data\": {\n    \"product_name\": \"stake\",\n    \"saved_co2\": 25056\n  }\n}\n</code></pre> <p>Will result in:</p> <p><code>Status 202</code></p> <pre><code>{\n  \"data\": {\n    \"product_id\": 36,\n    \"product_name\": \"stake\",\n    \"saved_co2\": 25056\n  },\n  \"location\": \"/products/36\",\n  \"message\": \"Item added successfully\"\n}\n</code></pre>"},{"location":"#productsid","title":"/products/:id","text":"<p>Where <code>:id</code> MUST be an integer number.</p> <p>The enpoint will respond with a Product object matching the <code>product_id</code> property with the given id.</p>"},{"location":"#get_1","title":"GET","text":"<p>This method gets the information of a specific product as a Product object.</p> <p>For example:</p> <p><code>GET /products/1</code></p> <p>Will result in:</p> <p><code>Status 202</code></p> <pre><code>{\n  \"data\": {\n    \"product_id\": 1,\n    \"product_name\": \"steak\",\n    \"saved_co2\": 20000\n  }\n}\n</code></pre> <p>If no products are found:</p> <p><code>Status 404</code></p> <pre><code>{\n  \"message\": \"Product not found\"\n}\n</code></pre>"},{"location":"#put","title":"PUT","text":"<p>This method updates the specific resource with new values. This is the list of all required properties:</p> Property Name Value Type Notes product_name String saved_co2 Integer Must be greater than 0 <p>WARNING if no resource is found with said id then a new resource is added. It is equivalent do the <code>POST /products</code> method.</p> <p>For example:</p> <p><code>PUT /products/1</code></p> <p>With json body:</p> <pre><code>{\n  \"data\": {\n    \"product_name\": \"steak\",\n    \"saved_co2\": 20000\n  }\n}\n</code></pre> <p>Will result in:</p> <p><code>Status 200</code></p> <pre><code>{\n  \"data\": {\n    \"product_id\": 38,\n    \"product_name\": \"test\",\n    \"saved_co2\": 156700\n  },\n  \"message\": \"Item Updated successfully\"\n}\n</code></pre> <p>If the resource does not exist it will be created. The response will be:</p> <p><code>Status 201</code></p> <pre><code>{\n  \"data\": {\n    \"product_id\": 39,\n    \"product_name\": \"test\",\n    \"saved_co2\": 156700\n  },\n  \"message\": \"Item Added successfully\",\n  \"location\": \"/products/39\"\n}\n</code></pre>"},{"location":"#delete","title":"DELETE","text":"<p>This method deletes the specific resource. Successive calls on the same resource after deleteion will result in a 404 status code.</p> <p>Deletion will always return the deleted product as a Product object.</p> <p>For example:</p> <p><code>DELETE /products/38</code></p> <p>Will result in:</p> <p><code>Status 200</code></p> <pre><code>{\n  \"data\": {\n    \"product_id\": 38,\n    \"product_name\": \"test\",\n    \"saved_co2\": 156700\n  },\n  \"message\": \"Item was deleted successfully\"\n}\n</code></pre> <p>If the resource was already deleted the response will be:</p> <p><code>Status 404</code></p> <pre><code>{\n  \"message\": \"Error Processing Request: Item with id 38 not found.\"\n}\n</code></pre>"},{"location":"#orders","title":"/orders","text":"<p>This endpoint is responsible for CRUD operations on the orders. It will always return an Order object with the following structure:</p> <pre><code>{\n  \"order_id\": Integer,\n  \"destination_country\": String,\n  \"sold_on\": DateTime,\n  \"products\": [ProductObject]\n}\n</code></pre> <p>This is a complete overview of the properties:</p> Property Name Type Notes order_id Integer destination_country String - sold_on DateTime Format is \"YYYY-MM-DD HH:mm:ss\" products Array Holds only Product objects"},{"location":"#get_2","title":"GET","text":"<p>This method always returns an array of Order objects. If no elements are found a 404 error is thrown.</p> <p>For example:</p> <p><code>GET /orders</code></p> <p>Will result in:</p> <p><code>Status 202</code></p> <pre><code>{\n  \"data\": [\n    {\n      \"order_id\": 94,\n      \"destination_country\": \"USA\",\n      \"sold_on\": \"2025-01-10 14:16:33\",\n      \"products\": [\n        {\n          \"product_id\": 1,\n          \"product_name\": \"steak\",\n          \"quantity\": 3000,\n          \"saved_co2\": 20000\n        },\n        {\n          \"product_id\": 1,\n          \"product_name\": \"steak\",\n          \"quantity\": 3000,\n          \"saved_co2\": 20000\n        },\n        {\n          \"product_id\": 1,\n          \"product_name\": \"steak\",\n          \"quantity\": 3000,\n          \"saved_co2\": 20000\n        }\n      ]\n    },\n    {\n      \"order_id\": 95,\n      \"destination_country\": \"Italy\",\n      \"sold_on\": \"2025-01-27 09:52:22\",\n      \"products\": [\n        {\n          \"product_id\": 1,\n          \"product_name\": \"steak\",\n          \"quantity\": 320,\n          \"saved_co2\": 20000\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>If no products are found:</p> <p><code>Status 404</code></p> <pre><code>{\n  \"message\": \"No orders found\"\n}\n</code></pre>"},{"location":"#post_1","title":"POST","text":"<p>This method allows to add an order to the available list. You will need to pass the following properties with the appropriate values.</p> Property Name Value Type Notes destination_country String products Array All items must be valid Product objects (see <code>/products</code> endpoint) <p>For example:</p> <p><code>POST /orders</code></p> <p>With json body:</p> <pre><code>{\n  \"data\": {\n    \"destination_country\": \"Italy\",\n    \"products\": [\n      {\n        \"product_id\": 1,\n        \"quantity\": 320\n      }\n    ]\n  }\n}\n</code></pre> <p>Will result in:</p> <p><code>Status 202</code></p> <pre><code>{\n  \"data\": {\n    \"order_id\": 96,\n    \"destination_country\": \"italy\",\n    \"sold_on\": \"2025-01-27 15:41:18\",\n    \"products\": [\n      {\n        \"product_id\": 1,\n        \"product_name\": \"steak\",\n        \"quantity\": 320,\n        \"saved_co2\": 20000\n      }\n    ]\n  },\n  \"message\": \"Order placed successfully\",\n  \"location\": \"/orders/96\"\n}\n</code></pre>"},{"location":"#ordersid","title":"/orders/:id","text":"<p>Where <code>:id</code> MUST be an integer number.</p> <p>The enpoint will respond with an Order object matching the <code>order_id</code> property with the given id.</p>"},{"location":"#get_3","title":"GET","text":"<p>This method gets the information of a specific order as a Orders object.</p> <p>For example:</p> <p><code>GET /orders/96</code></p> <p>Will result in:</p> <p><code>Status 202</code></p> <pre><code>{\n  \"data\": {\n    \"order_id\": 94,\n    \"destination_country\": \"USA\",\n    \"sold_on\": \"2025-01-10 14:16:33\",\n    \"products\": [\n      {\n        \"product_id\": 1,\n        \"product_name\": \"steak\",\n        \"quantity\": 3000,\n        \"saved_co2\": 20000\n      },\n      {\n        \"product_id\": 2,\n        \"product_name\": \"venison\",\n        \"quantity\": 1500,\n        \"saved_co2\": 13456\n      },\n      {\n        \"product_id\": 3,\n        \"product_name\": \"porkchop\",\n        \"quantity\": 1500,\n        \"saved_co2\": 19427\n      }\n    ]\n  }\n}\n</code></pre> <p>If no products are found:</p> <p><code>Status 404</code></p> <pre><code>{\n  \"message\": \"Order not found\"\n}\n</code></pre>"},{"location":"#put_1","title":"PUT","text":"<p>This method updates the specific order with new values. All properties are optional.</p> <p>WARNING if no resource is found with said id then a new resource is added. It is equivalent do the <code>POST /products</code> method.</p> <p>For example:</p> <p><code>PUT /orders/1</code></p> <p>With json body:</p> <pre><code>{\n  \"data\": {\n    \"destination_country\": \"USA\",\n    \"sold_on\": \"2025-01-10 14:16:33\",\n    \"products\": [\n      {\n        \"product_id\": 1,\n        \"quantity\": 3000\n      },\n      {\n        \"product_id\": 2,\n        \"quantity\": 1500\n      }\n    ]\n  }\n}\n</code></pre> <p>Will result in:</p> <p><code>Status 200</code></p> <pre><code>{\n    \"data\": {\n        \"order_id\": 94,\n        \"destination_country\": \"usa\",\n        \"sold_on\": \"2025-01-10 14:16:33\",\n        \"products\": [\n            {\n                \"product_id\": 1,\n                \"product_name\": \"steak\",\n                \"quantity\": 3000,\n                \"saved_co2\": 20000\n            },\n            {\n                \"product_id\": 2,\n                \"product_name\": \"venison\",\n                \"quantity\": 1500,\n                \"saved_co2\": 13456\n            },\n            {\n                \"product_id\": 3,\n                \"product_name\": \"porkchop\",\n                \"quantity\": 1500,\n                \"saved_co2\": 19427\n            }\n        ]\n    }\n}\n</code></pre> <p>If the resource does not exist it will be created. The response will be:</p> <p><code>Status 201</code></p> <pre><code>{\n  \"data\": {\n    \"order_id\": 97,\n    \"destination_country\": \"usa\",\n    \"sold_on\": \"2025-01-27 15:52:47\",\n    \"products\": [\n      {\n        \"product_id\": 1,\n        \"product_name\": \"steak\",\n        \"quantity\": 3000,\n        \"saved_co2\": 20000\n      },\n      {\n        \"product_id\": 2,\n        \"product_name\": \"venison\",\n        \"quantity\": 1500,\n        \"saved_co2\": 13456\n      }\n    ]\n  },\n  \"message\": \"Order placed successfully\",\n  \"location\": \"/orders/97\"\n}\n</code></pre>"},{"location":"#delete_1","title":"DELETE","text":"<p>This method deletes the specific order. Successive calls on the same resource after deleteion will result in a 404 status code.</p> <p>Deletion will always return the deleted product as an Order object.</p> <p>For example:</p> <p><code>DELETE /products/96</code></p> <p>Will result in:</p> <p><code>Status 200</code></p> <pre><code>{\n  \"data\": {\n    \"order_id\": 96,\n    \"destination_country\": \"italy\",\n    \"sold_on\": \"2025-01-27 15:41:18\",\n    \"products\": [\n      {\n        \"product_id\": 1,\n        \"product_name\": \"steak\",\n        \"quantity\": 320,\n        \"saved_co2\": 20000\n      }\n    ]\n  },\n  \"message\": \"Order was deleted successfully\"\n}\n</code></pre> <p>If the resource was already deleted the response will be:</p> <p><code>Status 404</code></p> <pre><code>{\n  \"message\": \"Error Processing Request: Item with id 96 not found.\"\n}\n</code></pre>"},{"location":"#ordersidresource","title":"/orders/:id/:resource","text":""},{"location":"#get_4","title":"GET","text":"<p>If <code>resource</code> exist within the order then return it. It returns the value of the resource.</p> <p>For example:</p> <p><code>GET /orders/94/products</code></p> <p>Will result in:</p> <p><code>Status 202</code></p> <pre><code>{\n  \"data\": [\n    {\n      \"product_id\": 1,\n      \"product_name\": \"steak\",\n      \"quantity\": 3000,\n      \"saved_co2\": 20000\n    },\n    {\n      \"product_id\": 2,\n      \"product_name\": \"venison\",\n      \"quantity\": 1500,\n      \"saved_co2\": 13456\n    },\n    {\n      \"product_id\": 3,\n      \"product_name\": \"porkchop\",\n      \"quantity\": 1500,\n      \"saved_co2\": 19427\n    }\n  ]\n}\n</code></pre> <p>Example 2:</p> <p><code>GET /orders/94/destination_country</code></p> <p>Will result in:</p> <p><code>Status 202</code></p> <pre><code>{\n  \"data\": \"usa\"\n}\n</code></pre>"},{"location":"#totalco2","title":"/totalco2","text":"<p>This endpoint supports url query parameters to refine your research.</p>"},{"location":"#get_5","title":"GET","text":"<p>Return an integer that is the sum of all the saved co2 from the Orders. Search can be refined with the following URL parameters:</p> Parameter Name Type Notes from DateTime Format is \"YYYY-MM-DD HH:mm:ss\" to DateTime Format is \"YYYY-MM-DD HH:mm:ss\" pid Integer Is the product id country String Case insensitive <p>For example:</p> <p><code>GET /totalco2</code></p> <p>Will result in:</p> <p><code>Status 202</code></p> <pre><code>{\n  \"data\": {\n    \"saved_co2\": 72883\n  }\n}\n</code></pre> <p>A failed request returns:</p> <p><code>Status 400</code></p> <pre><code>{\n  \"message\": \"Request malformed please retry. Follow The documentation if needed.\"\n}\n</code></pre> <p>Example 2:</p> <p><code>GET /totalco2?from=2025-01-01&amp;pid=1&amp;country=usa&amp;to=2025-01-27</code></p> <p>Will result in:</p> <p><code>Status 202</code></p> <pre><code>{\n  \"data\": {\n    \"saved_co2\": 20000\n  }\n}\n</code></pre>"}]}